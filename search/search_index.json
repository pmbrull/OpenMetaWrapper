{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"OpenMetada Catalogue API Wrapper. Documentation : https://pmbrull.github.io/OpenMetaWrapper/ Source Code : https://github.com/pmbrull/OpenMetaWrapper Installation \u00b6 Get up and running with $ pip install openmeta-wrapper ---> 100% Successfully installed levy Quickstart \u00b6 Lorem Ipsum","title":"Quickstart"},{"location":"#installation","text":"Get up and running with $ pip install openmeta-wrapper ---> 100% Successfully installed levy","title":"Installation"},{"location":"#quickstart","text":"Lorem Ipsum","title":"Quickstart"},{"location":"contributing/","text":"You can install the project requirements with make install . To run the tests, make install_test and make unit . With make precommit_install you can install the pre-commit hooks. To install the package from source, clone the repo, pip install flit and run flit install .","title":"Contributing"},{"location":"references/","text":"References \u00b6 pydantic - implementing the validation and data filling. datamodel-code-generator - Creating the pydantic classes typer and @tiangolo - thanks for preparing such amazing docs. JS and CSS ported from there. levy - As YAML parser with Pydantic validation.","title":"References"},{"location":"references/#references","text":"pydantic - implementing the validation and data filling. datamodel-code-generator - Creating the pydantic classes typer and @tiangolo - thanks for preparing such amazing docs. JS and CSS ported from there. levy - As YAML parser with Pydantic validation.","title":"References"}]}